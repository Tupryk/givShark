{"ast":null,"code":"var _jsxFileName = \"/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport \"../css/sharkFella.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RenderFella(_ref) {\n  _s();\n  let {\n    imageUrl\n  } = _ref;\n  const image_width = 128; // Shoud be influenced by actual size of shark\n  const image_height = 100;\n  const [point, setPoint] = useState({\n    left: Math.random() * (window.innerHeight - image_height),\n    top: Math.random() * (window.innerHeight - image_height)\n  });\n  const [rotation, setRotation] = useState(0);\n  const [flip, setFlip] = useState(1);\n  const [time_to_move, setTimeToMove] = useState(3000);\n\n  /*\n  let wable = 0;\n  let wable_amplitud = 0.07;\n  let wable_speed = 0.07;\n  let vis_h = ( image_height * (1-Math.abs( Math.sin(wable)*wable_amplitud+(1-wable_amplitud) )) ) + ( image_height*(1-wable_amplitud) ); \n  let vis_y = y - (image_width / 2) + image_height - vis_h;\n  */\n\n  const setNewPoint = useCallback(() => {\n    const newPoint = {\n      left: Math.random() * (window.innerWidth - image_width),\n      top: Math.random() * (window.innerHeight - image_height)\n    };\n    let co = newPoint.top - point.top;\n    let ca = newPoint.left - point.left;\n    let angle = Math.atan(Math.abs(co) / Math.abs(ca));\n    if (ca < 0) setFlip(1);else setFlip(-1);\n    if (co > 0 && ca < 0 || co < 0 && ca > 0) angle = Math.PI * 2 - angle;\n    setRotation(angle);\n    setPoint(newPoint);\n    setTimeToMove(Math.random() * 2000 + 3000);\n  }, [point]);\n  useEffect(() => {\n    const intervalId = setInterval(setNewPoint, time_to_move + Math.random() * time_to_move);\n    return () => clearInterval(intervalId);\n  }, [setNewPoint, time_to_move]);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    className: \"sharkFella\",\n    src: imageUrl,\n    alt: \"Moving shark\",\n    width: image_width,\n    height: image_height,\n    style: {\n      ...point,\n      transform: `rotate(${rotation}rad) scaleX(${flip})`,\n      transition: `left ${time_to_move}ms, top ${time_to_move}ms, transform 200ms ease-in-out`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n}\n_s(RenderFella, \"Ra5j1c5pGgruTwSTwekgFcpPJgQ=\");\n_c = RenderFella;\nexport default RenderFella;\nvar _c;\n$RefreshReg$(_c, \"RenderFella\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","RenderFella","imageUrl","image_width","image_height","point","setPoint","left","Math","random","window","innerHeight","top","rotation","setRotation","flip","setFlip","time_to_move","setTimeToMove","setNewPoint","newPoint","innerWidth","co","ca","angle","atan","abs","PI","intervalId","setInterval","clearInterval","transform","transition"],"sources":["/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport \"../css/sharkFella.css\"\n\n\nfunction RenderFella({ imageUrl }) {\n    const image_width = 128; // Shoud be influenced by actual size of shark\n    const image_height = 100;\n\n    const [point, setPoint] = useState({\n        left: Math.random() * (window.innerHeight - image_height),\n        top: Math.random() * (window.innerHeight - image_height),\n    });\n    const [rotation, setRotation] = useState(0);\n    const [flip, setFlip] = useState(1);\n    const [time_to_move, setTimeToMove] = useState(3000);\n\n    /*\n    let wable = 0;\n    let wable_amplitud = 0.07;\n    let wable_speed = 0.07;\n    let vis_h = ( image_height * (1-Math.abs( Math.sin(wable)*wable_amplitud+(1-wable_amplitud) )) ) + ( image_height*(1-wable_amplitud) ); \n    let vis_y = y - (image_width / 2) + image_height - vis_h;\n    */\n\n    const setNewPoint = useCallback(() => {\n        const newPoint = {\n            left: Math.random() * (window.innerWidth - image_width),\n            top: Math.random() * (window.innerHeight - image_height),\n        };\n        let co = newPoint.top - point.top;\n        let ca = newPoint.left - point.left;\n        let angle = Math.atan(Math.abs(co) / Math.abs(ca));\n\n        if (ca < 0) setFlip(1);\n        else setFlip(-1);\n\n        if ( (co > 0 && ca < 0) || (co < 0 && ca > 0) )\n            angle = Math.PI * 2 - angle;\n        setRotation(angle);\n\n        setPoint(newPoint);\n\n        setTimeToMove((Math.random()*2000) + 3000);\n    }, [point]);\n\n    useEffect(() => {\n        const intervalId = setInterval(setNewPoint, time_to_move+(Math.random()*time_to_move));\n        return () => clearInterval(intervalId);\n    }, [setNewPoint, time_to_move]);\n\n    return <img\n        className=\"sharkFella\"\n        src={imageUrl}\n        alt=\"Moving shark\"\n        width={image_width}\n        height={image_height}\n        style={{\n            ...point,\n            transform: `rotate(${rotation}rad) scaleX(${flip})`,\n            transition: `left ${time_to_move}ms, top ${time_to_move}ms, transform 200ms ease-in-out` }}\n    />;\n}\n\nexport default RenderFella;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAO,uBAAuB;AAAA;AAG9B,SAASC,WAAW,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAC7B,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB,MAAMC,YAAY,GAAG,GAAG;EAExB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC;IAC/BQ,IAAI,EAAEC,IAAI,CAACC,MAAM,EAAE,IAAIC,MAAM,CAACC,WAAW,GAAGP,YAAY,CAAC;IACzDQ,GAAG,EAAEJ,IAAI,CAACC,MAAM,EAAE,IAAIC,MAAM,CAACC,WAAW,GAAGP,YAAY;EAC3D,CAAC,CAAC;EACF,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACkB,YAAY,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;;EAEpD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAMoB,WAAW,GAAGnB,WAAW,CAAC,MAAM;IAClC,MAAMoB,QAAQ,GAAG;MACbb,IAAI,EAAEC,IAAI,CAACC,MAAM,EAAE,IAAIC,MAAM,CAACW,UAAU,GAAGlB,WAAW,CAAC;MACvDS,GAAG,EAAEJ,IAAI,CAACC,MAAM,EAAE,IAAIC,MAAM,CAACC,WAAW,GAAGP,YAAY;IAC3D,CAAC;IACD,IAAIkB,EAAE,GAAGF,QAAQ,CAACR,GAAG,GAAGP,KAAK,CAACO,GAAG;IACjC,IAAIW,EAAE,GAAGH,QAAQ,CAACb,IAAI,GAAGF,KAAK,CAACE,IAAI;IACnC,IAAIiB,KAAK,GAAGhB,IAAI,CAACiB,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAACJ,EAAE,CAAC,GAAGd,IAAI,CAACkB,GAAG,CAACH,EAAE,CAAC,CAAC;IAElD,IAAIA,EAAE,GAAG,CAAC,EAAEP,OAAO,CAAC,CAAC,CAAC,CAAC,KAClBA,OAAO,CAAC,CAAC,CAAC,CAAC;IAEhB,IAAMM,EAAE,GAAG,CAAC,IAAIC,EAAE,GAAG,CAAC,IAAMD,EAAE,GAAG,CAAC,IAAIC,EAAE,GAAG,CAAE,EACzCC,KAAK,GAAGhB,IAAI,CAACmB,EAAE,GAAG,CAAC,GAAGH,KAAK;IAC/BV,WAAW,CAACU,KAAK,CAAC;IAElBlB,QAAQ,CAACc,QAAQ,CAAC;IAElBF,aAAa,CAAEV,IAAI,CAACC,MAAM,EAAE,GAAC,IAAI,GAAI,IAAI,CAAC;EAC9C,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEXP,SAAS,CAAC,MAAM;IACZ,MAAM8B,UAAU,GAAGC,WAAW,CAACV,WAAW,EAAEF,YAAY,GAAET,IAAI,CAACC,MAAM,EAAE,GAACQ,YAAa,CAAC;IACtF,OAAO,MAAMa,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAE,CAACT,WAAW,EAAEF,YAAY,CAAC,CAAC;EAE/B,oBAAO;IACH,SAAS,EAAC,YAAY;IACtB,GAAG,EAAEf,QAAS;IACd,GAAG,EAAC,cAAc;IAClB,KAAK,EAAEC,WAAY;IACnB,MAAM,EAAEC,YAAa;IACrB,KAAK,EAAE;MACH,GAAGC,KAAK;MACR0B,SAAS,EAAG,UAASlB,QAAS,eAAcE,IAAK,GAAE;MACnDiB,UAAU,EAAG,QAAOf,YAAa,WAAUA,YAAa;IAAiC;EAAE;IAAA;IAAA;IAAA;EAAA,QACjG;AACN;AAAC,GAzDQhB,WAAW;AAAA,KAAXA,WAAW;AA2DpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}