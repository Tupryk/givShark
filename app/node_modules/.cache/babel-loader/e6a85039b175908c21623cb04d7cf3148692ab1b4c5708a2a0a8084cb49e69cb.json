{"ast":null,"code":"var _jsxFileName = \"/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RenderFella(_ref) {\n  _s();\n  let {\n    imageUrl\n  } = _ref;\n  const image_width = 128; // Shoud be influenced by actual size of shark\n  const image_height = 100;\n  const image = useMemo(() => {\n    const img = new Image();\n    img.src = imageUrl;\n    return img;\n  }, [imageUrl]);\n  useEffect(() => {\n    let x = window.innerWidth * 0.5;\n    let y = window.innerHeight * 0.5;\n    let dx = 0;\n    let dy = 0;\n    let radius = image_height / 2;\n    let intervalCounter = 0;\n    let intervalLimit = 100;\n    let intervalMaxLimit = 500;\n    let direction = {\n      x: 1,\n      y: 0\n    };\n    let moving = true;\n    let flipped = false;\n    let wable = 0;\n    let wable_amplitud = 0.07;\n    let wable_speed = 0.07;\n    function draw() {\n      let vis_w = image_width;\n      let vis_h = image_height * (1 - Math.abs(Math.sin(wable) * wable_amplitud + (1 - wable_amplitud))) + image_height * (1 - wable_amplitud);\n      let vis_x = x - image_width / 2;\n      let vis_y = y - image_width / 2 + image_height - vis_h;\n      console.log(\"bruh\");\n      if (flipped) {\n        /*\n        ctx.save();\n        ctx.translate(canvas.width / 2, canvas.height / 2);\n        ctx.scale(-1, 1);\n        ctx.drawImage(image, -vis_x + (canvas.width / 2) - image_width, vis_y - canvas.height / 2, vis_w, vis_h);\n        ctx.restore();\n        */\n      } else {\n        //ctx.drawImage(image, vis_x, vis_y, vis_w, vis_h);\n      }\n    }\n    function updatePosition() {\n      intervalCounter++;\n      wable += wable_speed;\n      if (moving && intervalCounter >= intervalLimit || !moving && intervalCounter >= intervalLimit * 0.5) {\n        intervalCounter = 0;\n        intervalLimit = intervalMaxLimit * Math.random();\n        moving = !moving;\n        direction = {\n          x: Math.random() * 2 - 1,\n          y: Math.random() * 2 - 1\n        };\n        dx = direction.x;\n        dy = direction.y;\n        if (moving) {\n          if (dx < 0) flipped = false;else flipped = true;\n        }\n      }\n      if (moving) {\n        // remove radius\n        if (x + dx > window.innerWidth - radius || x + dx < radius) dx = -dx;\n        if (y + dy > window.innerHeight - radius || y + dy < radius) dy = -dy;\n        x += dx;\n        y += dy;\n      }\n    }\n    function animate() {\n      draw();\n      updatePosition();\n    }\n    animate();\n  }, [imageUrl, image]);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: imageUrl,\n    width: image_width,\n    height: image_height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 12\n  }, this);\n}\n_s(RenderFella, \"LYqqb3wcKqHBeh+87NdxQNmHEHM=\");\n_c = RenderFella;\nexport default RenderFella;\nvar _c;\n$RefreshReg$(_c, \"RenderFella\");","map":{"version":3,"names":["React","RenderFella","imageUrl","image_width","image_height","image","useMemo","img","Image","src","useEffect","x","window","innerWidth","y","innerHeight","dx","dy","radius","intervalCounter","intervalLimit","intervalMaxLimit","direction","moving","flipped","wable","wable_amplitud","wable_speed","draw","vis_w","vis_h","Math","abs","sin","vis_x","vis_y","console","log","updatePosition","random","animate"],"sources":["/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js"],"sourcesContent":["import React from 'react';\n\n\nfunction RenderFella({ imageUrl })\n{\n    const image_width = 128; // Shoud be influenced by actual size of shark\n    const image_height = 100;\n    const image = useMemo(() => {\n        const img = new Image();\n        img.src = imageUrl;\n        return img;\n    }, [imageUrl]);\n\n    useEffect(() => {\n        let x = window.innerWidth * 0.5;\n        let y = window.innerHeight * 0.5;\n        let dx = 0;\n        let dy = 0;\n        let radius = image_height / 2;\n\n        let intervalCounter = 0;\n        let intervalLimit = 100;\n        let intervalMaxLimit = 500;\n\n        let direction = { x: 1, y: 0 };\n\n        let moving = true;\n        let flipped = false;\n\n        let wable = 0;\n        let wable_amplitud = 0.07;\n        let wable_speed = 0.07;\n    \n        function draw() {\n            let vis_w = image_width;\n            let vis_h = ( image_height * (1-Math.abs( Math.sin(wable)*wable_amplitud+(1-wable_amplitud) )) ) + ( image_height*(1-wable_amplitud) );\n            let vis_x = x - image_width / 2;\n            let vis_y = y - (image_width / 2) + image_height - vis_h;\n            console.log(\"bruh\");\n\n            if (flipped) {\n                /*\n                ctx.save();\n                ctx.translate(canvas.width / 2, canvas.height / 2);\n                ctx.scale(-1, 1);\n                ctx.drawImage(image, -vis_x + (canvas.width / 2) - image_width, vis_y - canvas.height / 2, vis_w, vis_h);\n                ctx.restore();\n                */\n            } else {\n                //ctx.drawImage(image, vis_x, vis_y, vis_w, vis_h);\n            }\n        }\n    \n        function updatePosition() {\n            intervalCounter++;\n            wable += wable_speed;\n\n            if ((moving && intervalCounter >= intervalLimit) || (!moving && intervalCounter >= intervalLimit*0.5)) {\n                intervalCounter = 0;\n                intervalLimit = intervalMaxLimit * Math.random();\n                moving = !moving;\n                direction = { x: Math.random() * 2 - 1, y: Math.random() * 2 - 1 };\n                dx = direction.x;\n                dy = direction.y;\n                if (moving) {\n                    if (dx < 0) flipped = false;\n                    else flipped = true;\n                }\n            }\n            if (moving) {\n                // remove radius\n                if (x + dx > window.innerWidth - radius || x + dx < radius)\n                    dx = -dx;\n                if (y + dy > window.innerHeight - radius || y + dy < radius)\n                    dy = -dy;\n                x += dx;\n                y += dy;\n            }\n        }\n    \n        function animate() {\n            draw();\n            updatePosition();\n        }\n    \n        animate();\n    }, [imageUrl, image]);\n    \n    return <img src={imageUrl} width={image_width} height={image_height} />;\n}\n\nexport default RenderFella;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}