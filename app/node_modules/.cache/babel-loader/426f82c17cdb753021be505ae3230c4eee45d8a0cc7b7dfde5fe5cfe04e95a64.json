{"ast":null,"code":"var _jsxFileName = \"/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"../css/sharkFella.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RenderFella(_ref) {\n  _s();\n  let {\n    imageUrl\n  } = _ref;\n  const image_width = 128; // Shoud be influenced by actual size of shark\n  const image_height = 100;\n  const [point, setPoint] = useState({\n    x: window.innerWidth * 0.5,\n    y: window.innerHeight * 0.5\n  });\n  let flipped = false;\n  let wable = 0;\n  let wable_amplitud = 0.07;\n  let wable_speed = 0.07;\n  /*\n  let vis_w = image_width;\n  let vis_h = ( image_height * (1-Math.abs( Math.sin(wable)*wable_amplitud+(1-wable_amplitud) )) ) + ( image_height*(1-wable_amplitud) );\n  let vis_x = x - image_width / 2;\n  let vis_y = y - (image_width / 2) + image_height - vis_h;\n  */\n  useEffect(() => {\n    function updatePosition() {\n      intervalCounter++;\n      wable += wable_speed;\n      if (intervalCounter >= intervalLimit) {\n        intervalCounter = 0;\n        intervalLimit = intervalMaxLimit * Math.random();\n        let new_x = Math.random() * window.innerWidth;\n        let new_y = Math.random() * window.innerHeight;\n        if (new_x < goToPoint.x) flipped = false;else flipped = true;\n        goToPoint = {\n          x: new_x,\n          y: new_y\n        };\n        setPointX(goToPoint.x);\n      }\n    }\n    console.log(\"updating\");\n    updatePosition();\n    const interval = setInterval(() => setTime(Date.now()), 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: imageUrl,\n    alt: \"Moving shark\",\n    width: image_width,\n    height: image_height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n}\n_s(RenderFella, \"JkJCpTdxODtB4GxBydv4GzuuiKQ=\");\n_c = RenderFella;\nexport default RenderFella;\nvar _c;\n$RefreshReg$(_c, \"RenderFella\");","map":{"version":3,"names":["React","useEffect","useState","RenderFella","imageUrl","image_width","image_height","point","setPoint","x","window","innerWidth","y","innerHeight","flipped","wable","wable_amplitud","wable_speed","updatePosition","intervalCounter","intervalLimit","intervalMaxLimit","Math","random","new_x","new_y","goToPoint","setPointX","console","log","interval","setInterval","setTime","Date","now","clearInterval"],"sources":["/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"../css/sharkFella.css\"\n\n\nfunction RenderFella({ imageUrl })\n{\n    const image_width = 128; // Shoud be influenced by actual size of shark\n    const image_height = 100;\n\n    const [point, setPoint] = useState( { x: window.innerWidth * 0.5, y: window.innerHeight * 0.5 } );\n\n    let flipped = false;\n\n    let wable = 0;\n    let wable_amplitud = 0.07;\n    let wable_speed = 0.07;\n    /*\n    let vis_w = image_width;\n    let vis_h = ( image_height * (1-Math.abs( Math.sin(wable)*wable_amplitud+(1-wable_amplitud) )) ) + ( image_height*(1-wable_amplitud) );\n    let vis_x = x - image_width / 2;\n    let vis_y = y - (image_width / 2) + image_height - vis_h;\n    */\n    useEffect(() => {\n        function updatePosition() {\n            intervalCounter++;\n            wable += wable_speed;\n\n            if (intervalCounter >= intervalLimit) {\n                intervalCounter = 0;\n                intervalLimit = intervalMaxLimit * Math.random();\n                let new_x = Math.random() * window.innerWidth;\n                let new_y = Math.random() * window.innerHeight;\n                if (new_x < goToPoint.x) flipped = false;\n                else flipped = true;\n                goToPoint = { x: new_x, y: new_y };\n                setPointX(goToPoint.x);\n            }\n        }\n        console.log(\"updating\");\n        updatePosition();\n        const interval = setInterval(() => setTime(Date.now()), 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n    \n    return <img src={imageUrl} alt=\"Moving shark\" width={image_width} height={image_height} />;\n}\n\nexport default RenderFella;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,uBAAuB;AAAA;AAG9B,SAASC,WAAW,OACpB;EAAA;EAAA,IADqB;IAAEC;EAAS,CAAC;EAE7B,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB,MAAMC,YAAY,GAAG,GAAG;EAExB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAE;IAAEO,CAAC,EAAEC,MAAM,CAACC,UAAU,GAAG,GAAG;IAAEC,CAAC,EAAEF,MAAM,CAACG,WAAW,GAAG;EAAI,CAAC,CAAE;EAEjG,IAAIC,OAAO,GAAG,KAAK;EAEnB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,cAAc,GAAG,IAAI;EACzB,IAAIC,WAAW,GAAG,IAAI;EACtB;AACJ;AACA;AACA;AACA;AACA;EACIhB,SAAS,CAAC,MAAM;IACZ,SAASiB,cAAc,GAAG;MACtBC,eAAe,EAAE;MACjBJ,KAAK,IAAIE,WAAW;MAEpB,IAAIE,eAAe,IAAIC,aAAa,EAAE;QAClCD,eAAe,GAAG,CAAC;QACnBC,aAAa,GAAGC,gBAAgB,GAAGC,IAAI,CAACC,MAAM,EAAE;QAChD,IAAIC,KAAK,GAAGF,IAAI,CAACC,MAAM,EAAE,GAAGb,MAAM,CAACC,UAAU;QAC7C,IAAIc,KAAK,GAAGH,IAAI,CAACC,MAAM,EAAE,GAAGb,MAAM,CAACG,WAAW;QAC9C,IAAIW,KAAK,GAAGE,SAAS,CAACjB,CAAC,EAAEK,OAAO,GAAG,KAAK,CAAC,KACpCA,OAAO,GAAG,IAAI;QACnBY,SAAS,GAAG;UAAEjB,CAAC,EAAEe,KAAK;UAAEZ,CAAC,EAAEa;QAAM,CAAC;QAClCE,SAAS,CAACD,SAAS,CAACjB,CAAC,CAAC;MAC1B;IACJ;IACAmB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvBX,cAAc,EAAE;IAChB,MAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAMC,OAAO,CAACC,IAAI,CAACC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;IAC7D,OAAO,MAAM;MACTC,aAAa,CAACL,QAAQ,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO;IAAK,GAAG,EAAE1B,QAAS;IAAC,GAAG,EAAC,cAAc;IAAC,KAAK,EAAEC,WAAY;IAAC,MAAM,EAAEC;EAAa;IAAA;IAAA;IAAA;EAAA,QAAG;AAC9F;AAAC,GA3CQH,WAAW;AAAA,KAAXA,WAAW;AA6CpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}