{"ast":null,"code":"var _jsxFileName = \"/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/habitat.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Ball() {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(_ref => {\n    let {\n      image\n    } = _ref;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let x = canvas.width / 2;\n    let y = canvas.height / 2;\n    let dx = 0;\n    let dy = 0;\n    let intervalCounter = 0;\n    let intervalLimit = 60; // Change direction every 60 frames\n\n    let direction = {\n      x: 1,\n      y: 0\n    }; // Start by going right\n    let amplitude = 20; // Oscillation amplitude\n    let period = 60; // Oscillation period (in frames)\n    let angle = 0; // Oscillation angle\n\n    function drawBall() {\n      ctx.drawImage(image, x - image.width / 2, y - image.height / 2);\n    }\n    function updateBallPosition() {\n      intervalCounter++;\n      if (intervalCounter >= intervalLimit) {\n        // Change direction and reset interval counter\n        intervalCounter = 0;\n        direction = {\n          x: Math.random() * 2 - 1,\n          y: Math.random() * 2 - 1\n        };\n      }\n\n      // Update position based on direction\n      dx = direction.x * 2;\n      dy = direction.y * 2;\n      x += dx;\n      y += dy;\n\n      // Oscillate height\n      angle += 2 * Math.PI / period;\n      y += amplitude * Math.sin(angle);\n    }\n    function animate() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBall();\n      updateBallPosition();\n      requestAnimationFrame(animate);\n    }\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: window.innerWidth,\n    height: window.innerHeight\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n}\n_s(Ball, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Ball;\nexport default Ball;\nvar _c;\n$RefreshReg$(_c, \"Ball\");","map":{"version":3,"names":["Ball","canvasRef","useRef","useEffect","image","canvas","current","ctx","getContext","x","width","y","height","dx","dy","intervalCounter","intervalLimit","direction","amplitude","period","angle","drawBall","drawImage","updateBallPosition","Math","random","PI","sin","animate","clearRect","requestAnimationFrame","window","innerWidth","innerHeight"],"sources":["/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/habitat.js"],"sourcesContent":["function Ball() {\n  const canvasRef = useRef(null);\n\n  useEffect(({image}) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    let x = canvas.width / 2;\n    let y = canvas.height / 2;\n    let dx = 0;\n    let dy = 0;\n\n    let intervalCounter = 0;\n    let intervalLimit = 60; // Change direction every 60 frames\n\n    let direction = { x: 1, y: 0 }; // Start by going right\n    let amplitude = 20; // Oscillation amplitude\n    let period = 60; // Oscillation period (in frames)\n    let angle = 0; // Oscillation angle\n\n    function drawBall() {\n        ctx.drawImage(image, x - image.width / 2, y - image.height / 2);\n    }\n\n    function updateBallPosition() {\n      intervalCounter++;\n\n      if (intervalCounter >= intervalLimit) {\n        // Change direction and reset interval counter\n        intervalCounter = 0;\n        direction = { x: Math.random() * 2 - 1, y: Math.random() * 2 - 1 };\n      }\n\n      // Update position based on direction\n      dx = direction.x * 2;\n      dy = direction.y * 2;\n      x += dx;\n      y += dy;\n\n      // Oscillate height\n      angle += (2 * Math.PI) / period;\n      y += amplitude * Math.sin(angle);\n    }\n\n    function animate() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBall();\n      updateBallPosition();\n      requestAnimationFrame(animate);\n    }\n\n    animate();\n  }, []);\n\n  return <canvas ref={canvasRef} width={window.innerWidth} height={window.innerHeight} />;\n}\n\nexport default Ball;\n"],"mappings":";;;AAAA,SAASA,IAAI,GAAG;EAAA;EACd,MAAMC,SAAS,GAAGC,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,QAAa;IAAA,IAAZ;MAACC;IAAK,CAAC;IAChB,MAAMC,MAAM,GAAGJ,SAAS,CAACK,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEnC,IAAIC,CAAC,GAAGJ,MAAM,CAACK,KAAK,GAAG,CAAC;IACxB,IAAIC,CAAC,GAAGN,MAAM,CAACO,MAAM,GAAG,CAAC;IACzB,IAAIC,EAAE,GAAG,CAAC;IACV,IAAIC,EAAE,GAAG,CAAC;IAEV,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,aAAa,GAAG,EAAE,CAAC,CAAC;;IAExB,IAAIC,SAAS,GAAG;MAAER,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE;IAAE,CAAC,CAAC,CAAC;IAChC,IAAIO,SAAS,GAAG,EAAE,CAAC,CAAC;IACpB,IAAIC,MAAM,GAAG,EAAE,CAAC,CAAC;IACjB,IAAIC,KAAK,GAAG,CAAC,CAAC,CAAC;;IAEf,SAASC,QAAQ,GAAG;MAChBd,GAAG,CAACe,SAAS,CAAClB,KAAK,EAAEK,CAAC,GAAGL,KAAK,CAACM,KAAK,GAAG,CAAC,EAAEC,CAAC,GAAGP,KAAK,CAACQ,MAAM,GAAG,CAAC,CAAC;IACnE;IAEA,SAASW,kBAAkB,GAAG;MAC5BR,eAAe,EAAE;MAEjB,IAAIA,eAAe,IAAIC,aAAa,EAAE;QACpC;QACAD,eAAe,GAAG,CAAC;QACnBE,SAAS,GAAG;UAAER,CAAC,EAAEe,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC;UAAEd,CAAC,EAAEa,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG;QAAE,CAAC;MACpE;;MAEA;MACAZ,EAAE,GAAGI,SAAS,CAACR,CAAC,GAAG,CAAC;MACpBK,EAAE,GAAGG,SAAS,CAACN,CAAC,GAAG,CAAC;MACpBF,CAAC,IAAII,EAAE;MACPF,CAAC,IAAIG,EAAE;;MAEP;MACAM,KAAK,IAAK,CAAC,GAAGI,IAAI,CAACE,EAAE,GAAIP,MAAM;MAC/BR,CAAC,IAAIO,SAAS,GAAGM,IAAI,CAACG,GAAG,CAACP,KAAK,CAAC;IAClC;IAEA,SAASQ,OAAO,GAAG;MACjBrB,GAAG,CAACsB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAExB,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACO,MAAM,CAAC;MAChDS,QAAQ,EAAE;MACVE,kBAAkB,EAAE;MACpBO,qBAAqB,CAACF,OAAO,CAAC;IAChC;IAEAA,OAAO,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO;IAAQ,GAAG,EAAE3B,SAAU;IAAC,KAAK,EAAE8B,MAAM,CAACC,UAAW;IAAC,MAAM,EAAED,MAAM,CAACE;EAAY;IAAA;IAAA;IAAA;EAAA,QAAG;AACzF;AAAC,GAvDQjC,IAAI;AAAA,KAAJA,IAAI;AAyDb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}