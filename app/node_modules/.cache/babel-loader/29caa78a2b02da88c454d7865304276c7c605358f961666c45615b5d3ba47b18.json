{"ast":null,"code":"var _jsxFileName = \"/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport \"../css/sharkFella.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RenderFella(_ref) {\n  _s();\n  let {\n    imageUrl\n  } = _ref;\n  const image_width = 128; // Shoud be influenced by actual size of shark\n  const image_height = 100;\n  const [point, setPoint] = useState({\n    left: Math.random() * (window.innerWidth - image_width),\n    top: Math.random() * (window.innerHeight - image_height)\n  });\n  let initialFlip = 1;\n  if (Math.round(Math.random()) === 0) initialFlip = -1;\n  const [flip, setFlip] = useState(initialFlip);\n  const [rotation, setRotation] = useState(0);\n  const [time_to_move, setTimeToMove] = useState(Math.random() * 2000 + 3000);\n\n  /*\n  let wable = 0;\n  let wable_amplitud = 0.07;\n  let wable_speed = 0.07;\n  let vis_h = ( image_height * (1-Math.abs( Math.sin(wable)*wable_amplitud+(1-wable_amplitud) )) ) + ( image_height*(1-wable_amplitud) ); \n  let vis_y = y - (image_width / 2) + image_height - vis_h;\n  */\n\n  const setNewPoint = useCallback(() => {\n    const q = Math.floor(Math.random() * 4);\n    const angle = Math.random() * 0.2 * Math.PI - 0.1 * Math.PI;\n    const travel = window.innerWidth * 0.2;\n    let new_top = Math.sin(angle) * travel;\n    let new_left = Math.cos(angle) * travel;\n    if (q === 0)\n      // top_left quadrant\n      new_left *= -1;else if (q === 2) {\n      // bottom_left quadrant\n      new_left *= -1;\n      new_top *= -1;\n    } else if (q === 3)\n      // bottom_right quadrant\n      new_top *= -1;\n\n    /*\n    if ( new_top > window.innerHeight - image_height ||\n         new_left > window.innerWidth - image_width ||\n         new_top < 0 ||\n         new_left < 0\n        ) {\n        new_top = point.top;\n        new_left = point.left;\n    }\n    */\n\n    if (new_top + point.top > window.innerHeight - image_height) new_top *= -1;else if (new_top + point.top < 0) new_top *= -1;\n    if (new_left + point.left > window.innerWidth - image_width) new_left *= -1;else if (new_left + point.left < 0) new_left *= -1;\n    new_top += point.top;\n    new_left += point.left;\n    const newPoint = {\n      left: new_left,\n      //left: Math.random() * ( window.innerWidth - image_width ),\n      top: new_top\n      //top: Math.random() * ( window.innerHeight - image_height ),\n    };\n\n    let co = newPoint.top - point.top;\n    let ca = newPoint.left - point.left;\n    let final_angle = Math.atan(Math.abs(co) / Math.abs(ca));\n    if (ca < 0) setFlip(1);else setFlip(-1);\n    if (co > 0 && ca < 0 || co < 0 && ca > 0) final_angle = Math.PI * 2 - final_angle;\n    setRotation(final_angle);\n    setPoint(newPoint);\n    setTimeToMove(Math.random() * 2000 + 3000);\n  }, [point]);\n  useEffect(() => {\n    const intervalId = setInterval(setNewPoint, time_to_move + Math.random() * time_to_move);\n    return () => clearInterval(intervalId);\n  }, [setNewPoint, time_to_move]);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    className: \"sharkFella\",\n    src: imageUrl,\n    alt: \"Moving shark\",\n    width: image_width\n    //height={image_height}\n    ,\n    style: {\n      ...point,\n      transform: `rotate(${rotation}rad) scaleX(${flip})`,\n      transition: `left ${time_to_move}ms linear, top ${time_to_move}ms linear, transform 500ms ease-in-out`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 12\n  }, this);\n}\n_s(RenderFella, \"Qry5SaTvS88f2PMhTX9JHXES7ng=\");\n_c = RenderFella;\nexport default RenderFella;\nvar _c;\n$RefreshReg$(_c, \"RenderFella\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","RenderFella","imageUrl","image_width","image_height","point","setPoint","left","Math","random","window","innerWidth","top","innerHeight","initialFlip","round","flip","setFlip","rotation","setRotation","time_to_move","setTimeToMove","setNewPoint","q","floor","angle","PI","travel","new_top","sin","new_left","cos","newPoint","co","ca","final_angle","atan","abs","intervalId","setInterval","clearInterval","transform","transition"],"sources":["/Users/tupryk/Documents/Projects/icanhazshark/app/src/modules/SharkFellaCss.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport \"../css/sharkFella.css\"\n\n\nfunction RenderFella({ imageUrl }) {\n    const image_width = 128; // Shoud be influenced by actual size of shark\n    const image_height = 100;\n\n    const [point, setPoint] = useState({\n        left: Math.random() * (window.innerWidth - image_width),\n        top: Math.random() * (window.innerHeight - image_height),\n    });\n\n    let initialFlip = 1;\n    if ( Math.round( Math.random() ) === 0) initialFlip = -1;\n    const [flip, setFlip] = useState( initialFlip );\n    const [rotation, setRotation] = useState(0);\n    const [time_to_move, setTimeToMove] = useState( ( Math.random() * 2000 ) + 3000 );\n\n    /*\n    let wable = 0;\n    let wable_amplitud = 0.07;\n    let wable_speed = 0.07;\n    let vis_h = ( image_height * (1-Math.abs( Math.sin(wable)*wable_amplitud+(1-wable_amplitud) )) ) + ( image_height*(1-wable_amplitud) ); \n    let vis_y = y - (image_width / 2) + image_height - vis_h;\n    */\n\n    const setNewPoint = useCallback(() => {\n\n        const q = Math.floor( Math.random() * 4 );\n        const angle = ( Math.random() * 0.2 * Math.PI ) - ( 0.1 * Math.PI );\n        const travel = window.innerWidth * 0.2;\n\n        let new_top = Math.sin( angle ) * travel;\n        let new_left = Math.cos( angle ) * travel;\n\n        if ( q === 0 ) // top_left quadrant\n            new_left *= -1;\n        else if ( q === 2 ) { // bottom_left quadrant\n            new_left *= -1;\n            new_top *= -1;\n        } else if ( q === 3 ) // bottom_right quadrant\n            new_top *= -1;\n\n        /*\n        if ( new_top > window.innerHeight - image_height ||\n             new_left > window.innerWidth - image_width ||\n             new_top < 0 ||\n             new_left < 0\n            ) {\n            new_top = point.top;\n            new_left = point.left;\n        }\n        */\n\n        if ( new_top + point.top > window.innerHeight - image_height )\n        new_top *= -1;\n        else if ( new_top + point.top < 0 )\n        new_top *= -1;\n\n        if ( new_left + point.left > window.innerWidth - image_width )\n        new_left *= -1;\n        else if ( new_left + point.left < 0 )\n        new_left *= -1;\n\n        new_top += point.top;\n        new_left += point.left;\n\n        const newPoint = {\n            left: new_left,\n            //left: Math.random() * ( window.innerWidth - image_width ),\n            top: new_top,\n            //top: Math.random() * ( window.innerHeight - image_height ),\n        };\n\n        let co = newPoint.top - point.top;\n        let ca = newPoint.left - point.left;\n        let final_angle = Math.atan(Math.abs(co) / Math.abs(ca));\n\n        if (ca < 0) setFlip(1);\n        else setFlip(-1);\n\n        if ( (co > 0 && ca < 0) || (co < 0 && ca > 0) )\n            final_angle = Math.PI * 2 - final_angle;\n        setRotation( final_angle );\n\n        setPoint(newPoint);\n\n        setTimeToMove( ( Math.random() * 2000 ) + 3000 );\n    }, [point]);\n\n    useEffect(() => {\n        const intervalId = setInterval(setNewPoint, time_to_move+(Math.random()*time_to_move));\n        return () => clearInterval(intervalId);\n    }, [setNewPoint, time_to_move]);\n\n    return <img\n        className=\"sharkFella\"\n        src={imageUrl}\n        alt=\"Moving shark\"\n        width={image_width}\n        //height={image_height}\n        style={{\n            ...point,\n            transform: `rotate(${rotation}rad) scaleX(${flip})`,\n            transition: `left ${time_to_move}ms linear, top ${time_to_move}ms linear, transform 500ms ease-in-out` }}\n    />;\n}\n\nexport default RenderFella;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}